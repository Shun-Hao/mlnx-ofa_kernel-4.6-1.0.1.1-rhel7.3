From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/eq.c

Change-Id: I297a7dcf4de77e98fefd40c7032695165bed1ba3
---
 drivers/net/ethernet/mellanox/mlx5/core/eq.c | 31 ++++++++++++++++++++++++++--
 1 file changed, 29 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eq.c b/drivers/net/ethernet/mellanox/mlx5/core/eq.c
index xxxxxxx..xxxxxxx 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eq.c
@@ -243,7 +243,11 @@ static void eq_pf_process(struct mlx5_eq *eq)
 			break;
 		}
 
+#ifdef dma_rmb
 		dma_rmb();
+#else
+		rmb();
+#endif
 		pf_eqe = &eqe->data.page_fault;
 		pfault->event_subtype = eqe->sub_type;
 		pfault->bytes_committed = be32_to_cpu(pf_eqe->bytes_committed);
@@ -465,7 +469,7 @@ int mlx5_core_page_fault_resume(struct mlx5_core_dev *dev,
 	return ret;
 }
 EXPORT_SYMBOL_GPL(mlx5_core_page_fault_resume);
-#endif
+#endif /* CONFIG_INFINIBAND_ON_DEMAND_PAGING */
 
 static void general_event_handler(struct mlx5_core_dev *dev,
 				  struct mlx5_eqe *eqe)
@@ -559,7 +563,11 @@ static irqreturn_t mlx5_eq_int(int irq, void *eq_ptr)
 		 * Make sure we read EQ entry contents after we've
 		 * checked the ownership bit.
 		 */
+#ifdef dma_rmb
 		dma_rmb();
+#else
+		rmb();
+#endif
 
 		mlx5_core_dbg(eq->dev, "eqn %d, eqe type %s\n",
 			      eq->eqn, eqe_type_str(eqe->type));
@@ -667,9 +675,11 @@ static irqreturn_t mlx5_eq_int(int irq, void *eq_ptr)
 			mlx5_port_module_event(dev, eqe);
 			break;
 
+#if defined (HAVE_PTP_CLOCK_INFO_N_PINS) && defined (HAVE_PTP_CLOCK_INFO) && (defined (CONFIG_PTP_1588_CLOCK) || defined(CONFIG_PTP_1588_CLOCK_MODULE))
 		case MLX5_EVENT_TYPE_PPS_EVENT:
 			mlx5_pps_event(dev, eqe);
 			break;
+#endif
 
 		case MLX5_EVENT_TYPE_FPGA_ERROR:
 		case MLX5_EVENT_TYPE_FPGA_QP_ERROR:
@@ -821,7 +831,11 @@ int mlx5_create_map_eq(struct mlx5_core_dev *dev, struct mlx5_eq *eq, u8 vecidx,
 	mlx5_add_pci_to_irq_name(dev, name, priv->irq_info[vecidx].name);
 
 	eq->eqn = MLX5_GET(create_eq_out, out, eq_number);
-	eq->irqn = pci_irq_vector(dev->pdev, vecidx);
+#ifdef HAVE_PCI_IRQ_API
+       eq->irqn = pci_irq_vector(dev->pdev, vecidx);
+#else
+	eq->irqn = priv->msix_arr[vecidx].vector;
+#endif
 	eq->dev = dev;
 	eq->doorbell = priv->uar->map + MLX5_EQ_DOORBEL_OFFSET;
 	err = request_irq(eq->irqn, handler, 0,
@@ -856,7 +870,11 @@ int mlx5_create_map_eq(struct mlx5_core_dev *dev, struct mlx5_eq *eq, u8 vecidx,
 	return 0;
 
 err_irq:
+#ifdef HAVE_PCI_IRQ_API
 	free_irq(eq->irqn, eq);
+#else
+	free_irq(priv->msix_arr[vecidx].vector, eq);
+#endif
 
 err_eq:
 	mlx5_cmd_destroy_eq(dev, eq->eqn);
@@ -929,6 +947,13 @@ int mlx5_eq_del_cq(struct mlx5_eq *eq, struct mlx5_core_cq *cq)
 	return 0;
 }
 
+#ifndef HAVE_PCI_IRQ_API
+u32 mlx5_get_msix_vec(struct mlx5_core_dev *dev, int vecidx)
+{
+	return dev->priv.msix_arr[MLX5_EQ_VEC_ASYNC].vector;
+}
+#endif
+
 int mlx5_eq_init(struct mlx5_core_dev *dev)
 {
 	int err;
@@ -1108,5 +1133,7 @@ void mlx5_core_eq_free_irqs(struct mlx5_core_dev *dev)
 	if (MLX5_CAP_GEN(dev, pg))
 		free_irq(table->pfault_eq.irqn, &table->pfault_eq);
 #endif
+#ifdef HAVE_PCI_IRQ_API
 	pci_free_irq_vectors(dev->pdev);
+#endif
 }
