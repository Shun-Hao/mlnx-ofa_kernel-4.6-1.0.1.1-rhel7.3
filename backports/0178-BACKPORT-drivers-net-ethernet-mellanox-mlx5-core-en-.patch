From: Talat Batheesh <talatb@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c

Change-Id: I2b2d6b9f70609955b215ccd167e9a5cd09a1db53
---
 drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c | 52 +++++++++++++++++++++---
 1 file changed, 46 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
index xxxxxxx..xxxxxxx 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
@@ -33,6 +33,7 @@
 #include <linux/bpf_trace.h>
 #include "en/xdp.h"
 
+#ifdef HAVE_XDP_CONVERT_TO_XDP_FRAME
 static inline bool
 mlx5e_xmit_xdp_buff(struct mlx5e_xdpsq *sq, struct mlx5e_dma_info *di,
 		    struct xdp_buff *xdp)
@@ -49,52 +50,94 @@ mlx5e_xmit_xdp_buff(struct mlx5e_xdpsq *sq, struct mlx5e_dma_info *di,
 
 	return mlx5e_xmit_xdp_frame(sq, &xdpi);
 }
-
+#endif
 /* returns true if packet was consumed by xdp */
+#ifdef HAVE_XDP_BUFF_DATA_HARD_START
 bool mlx5e_xdp_handle(struct mlx5e_rq *rq, struct mlx5e_dma_info *di,
 		      void *va, u16 *rx_headroom, u32 *len)
+#else
+static inline bool mlx5e_xdp_handle(struct mlx5e_rq *rq,
+				    const struct bpf_prog *prog,
+				    struct mlx5e_dma_info *di,
+				    void *data, u16 len)
+#endif
 {
+#ifdef HAVE_XDP_BUFF_DATA_HARD_START
 	struct bpf_prog *prog = READ_ONCE(rq->xdp_prog);
+#endif
 	struct xdp_buff xdp;
 	u32 act;
+#ifdef HAVE_XDP_REDIRECT
 	int err;
+#endif
 
 	if (!prog)
 		return false;
 
+#ifdef HAVE_XDP_BUFF_DATA_HARD_START
 	xdp.data = va + *rx_headroom;
+#ifdef HAVE_XDP_SET_DATA_META_INVALID
 	xdp_set_data_meta_invalid(&xdp);
+#endif
 	xdp.data_end = xdp.data + *len;
 	xdp.data_hard_start = va;
+#else
+	xdp.data = data;
+	xdp.data_end = xdp.data + len;
+#endif
+#ifdef HAVE_NET_XDP_H
 	xdp.rxq = &rq->xdp_rxq;
+#endif
 
 	act = bpf_prog_run_xdp(prog, &xdp);
 	switch (act) {
 	case XDP_PASS:
+#ifdef HAVE_XDP_BUFF_DATA_HARD_START
 		*rx_headroom = xdp.data - xdp.data_hard_start;
 		*len = xdp.data_end - xdp.data;
+#endif
 		return false;
 	case XDP_TX:
+#ifdef HAVE_XDP_CONVERT_TO_XDP_FRAME
+#if defined(HAVE_TRACE_XDP_EXCEPTION) && !defined(MLX_DISABLE_TRACEPOINTS)
 		if (unlikely(!mlx5e_xmit_xdp_buff(&rq->xdpsq, di, &xdp)))
 			goto xdp_abort;
+#else
+#ifdef HAVE_XDP_BUFF_DATA_HARD_START
+		mlx5e_xmit_xdp_frame(rq, di, &xdp);
+#else
+		mlx5e_xmit_xdp_frame(rq, di, MLX5_RX_HEADROOM, len);
+#endif
+#endif
 		__set_bit(MLX5E_RQ_FLAG_XDP_XMIT, rq->flags); /* non-atomic */
+#endif
 		return true;
+#ifdef HAVE_XDP_REDIRECT
 	case XDP_REDIRECT:
 		/* When XDP enabled then page-refcnt==1 here */
 		err = xdp_do_redirect(rq->netdev, &xdp, prog);
+#ifdef HAVE_XDP_CONVERT_TO_XDP_FRAME
 		if (unlikely(err))
 			goto xdp_abort;
 		__set_bit(MLX5E_RQ_FLAG_XDP_XMIT, rq->flags);
 		rq->xdpsq.redirect_flush = true;
 		mlx5e_page_dma_unmap(rq, di);
+#endif
 		rq->stats->xdp_redirect++;
 		return true;
+#endif
 	default:
 		bpf_warn_invalid_xdp_action(act);
 		/* fall through */
 	case XDP_ABORTED:
+#ifdef HAVE_XDP_REDIRECT
+#ifdef HAVE_XDP_CONVERT_TO_XDP_FRAME
 xdp_abort:
+#endif
+#ifndef MLX_DISABLE_TRACEPOINTS
 		trace_xdp_exception(rq->netdev, prog, act);
+#endif
+#endif
 		/* fall through */
 	case XDP_DROP:
 		rq->stats->xdp_drop++;
@@ -102,6 +145,7 @@ xdp_abort:
 	}
 }
 
+#ifdef HAVE_XDP_CONVERT_TO_XDP_FRAME
 bool mlx5e_xmit_xdp_frame(struct mlx5e_xdpsq *sq, struct mlx5e_xdp_info *xdpi)
 {
 	struct mlx5_wq_cyc       *wq   = &sq->wq;
@@ -116,7 +160,6 @@ bool mlx5e_xmit_xdp_frame(struct mlx5e_xdpsq *sq, struct mlx5e_xdp_info *xdpi)
 	struct xdp_frame *xdpf = xdpi->xdpf;
 	dma_addr_t dma_addr  = xdpi->dma_addr;
 	unsigned int dma_len = xdpf->len;
-
 	struct mlx5e_xdpsq_stats *stats = sq->stats;
 
 	prefetchw(wqe);
@@ -125,7 +168,6 @@ bool mlx5e_xmit_xdp_frame(struct mlx5e_xdpsq *sq, struct mlx5e_xdp_info *xdpi)
 		stats->err++;
 		return false;
 	}
-
 	if (unlikely(!mlx5e_wqc_has_room_for(wq, sq->cc, sq->pc, 1))) {
 		if (sq->doorbell) {
 			/* SQ is full, ring doorbell */
@@ -167,7 +209,6 @@ bool mlx5e_xmit_xdp_frame(struct mlx5e_xdpsq *sq, struct mlx5e_xdp_info *xdpi)
 	stats->xmit++;
 	return true;
 }
-
 bool mlx5e_poll_xdpsq_cq(struct mlx5e_cq *cq)
 {
 	struct mlx5e_xdpsq *sq;
@@ -206,7 +247,6 @@ bool mlx5e_poll_xdpsq_cq(struct mlx5e_cq *cq)
 		do {
 			u16 ci = mlx5_wq_cyc_ctr2ix(&sq->wq, sqcc);
 			struct mlx5e_xdp_info *xdpi = &sq->db.xdpi[ci];
-
 			last_wqe = (sqcc == wqe_counter);
 			sqcc++;
 
@@ -239,7 +279,6 @@ void mlx5e_free_xdpsq_descs(struct mlx5e_xdpsq *sq)
 
 	is_redirect = test_bit(MLX5E_SQ_STATE_REDIRECT, &sq->state);
 	rq = is_redirect ? NULL : container_of(sq, struct mlx5e_rq, xdpsq);
-
 	while (sq->cc != sq->pc) {
 		u16 ci = mlx5_wq_cyc_ctr2ix(&sq->wq, sq->cc);
 		struct mlx5e_xdp_info *xdpi = &sq->db.xdpi[ci];
@@ -309,3 +348,4 @@ int mlx5e_xdp_xmit(struct net_device *dev, int n, struct xdp_frame **frames,
 
 	return n - drops;
 }
+#endif
